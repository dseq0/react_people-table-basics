{"version":3,"sources":["components/NavBar.tsx","App.tsx","components/Pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonInfo.tsx","components/PeopleTable.tsx","components/preparedPeopleInfo.tsx","components/Pages/PeoplePage.tsx","components/Pages/PageNotFound.tsx","components/Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","NavBar","className","role","to","App","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","name","PersonInfo","personSlug","useParams","born","died","mother","motherName","father","fatherName","tableValues","PeopleTable","PreparedPeopleInfo","people","findPersonByName","personName","find","map","getPreparedPeopleInfo","columnValue","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","isTableEmpty","length","updatePeopleList","loadedPeople","useEffect","PageNotFound","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.beac4cc0.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item',\n    { 'has-background-grey-lighter': isActive });\n};\n\nexport const NavBar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\n\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../${person.slug}`}\n      className={classNames({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonInfo: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={person.slug}\n      className={classNames({\n        'has-background-warning': personSlug === person.slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother\n          ? (\n            <PersonLink person={person.mother} />\n          ) : (\n            person.motherName || '-'\n          )}\n      </td>\n      <td>\n        {person.father\n          ? (\n            <PersonLink person={person.father} />\n          ) : (\n            person.fatherName || '-'\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { Person } from '../types';\nimport { getPreparedPeopleInfo } from './preparedPeopleInfo';\nimport { PersonInfo } from './PersonInfo';\n\nconst tableValues = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const PreparedPeopleInfo = getPreparedPeopleInfo(people);\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {tableValues.map(columnValue => (\n            <th key={columnValue}>{columnValue}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {PreparedPeopleInfo.map(person => (\n          <PersonInfo person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from '../types';\n\nexport const getPreparedPeopleInfo = (people: Person[]) => {\n  const findPersonByName = (personName: string | null) => people\n    .find(({ name }) => name === personName);\n\n  return people.map(person => {\n    const mother = findPersonByName(person.motherName);\n\n    const father = findPersonByName(person.fatherName);\n\n    return { ...person, mother, father };\n  });\n};\n","import { useEffect, useState } from 'react';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const isTableEmpty = !people.length && !errorMessage && !isLoading;\n\n  const updatePeopleList = async () => {\n    setIsLoading(true);\n    try {\n      const loadedPeople = await getPeople();\n\n      setPeople(loadedPeople);\n    } catch {\n      setErrorMessage('Something went wrong');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    updatePeopleList();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {errorMessage && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {isTableEmpty && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {people.length > 0 && (\n            <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const PageNotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from '../App';\nimport { HomePage } from './Pages/HomePage';\nimport { PeoplePage } from './Pages/PeoplePage';\nimport { PageNotFound } from './Pages/PageNotFound';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route path=\":personSlug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"home\" element={<Navigate to=\"..\" replace />} />\n          <Route path=\"*\" element={<PageNotFound />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './components/Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}